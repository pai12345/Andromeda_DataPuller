name: Automation Workflow
on:
  push:
    branches:
      - feature/**
  pull_request:
    branches:
      - develop
jobs:
  BUILD:
    runs-on: ubuntu-20.04
    steps:
      - name: clone repo
        uses: actions/checkout@v2.3.5
        with:
          repository: ${{ github.repository }}
          ref: ${{ env.branch }}
          fetch-depth: 1
      - name: lint commits
        uses: wagoid/commitlint-github-action@v4
        with:
          configFile: "./commitlint.config.js"
          firstParent: true
          failOnWarnings: true
      - name: cache dependencies
        uses: actions/cache@v2.1.6
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          path: |
            ${{ runner.os }}-node-
      - name: setup node
        uses: actions/setup-node@v2.4.1
        with:
          node-version: "16"
          cache: "npm"
      - name: install npm dependencies
        run: npm install
      - name: lint git branch
        run: npx branch-name-lint options.json
      - name: lint source code
        run: npm run lint
      - name: lint docker code
        run: npx dockerfilelint Dockerfile
      - name: check app build
        run: npm run build-prod
  STAGING:
    runs-on: ubuntu-20.04
    steps:
      - name: clone repo
        uses: actions/checkout@v2.3.5
        with:
          repository: ${{ github.repository }}
          ref: ${{ env.branch }}
          fetch-depth: 1
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SYNK_KEY }}

  DEPLOY:
    runs-on: ubuntu-20.04
    steps:
      - name: Login Container Registry
        run: docker login --username=${{ secrets.DOCKERHUB_USERNAME }} --password-stdin<<<'${{ secrets.DOCKERHUB_TOKEN }}!!'
      - name: clone repo
        uses: actions/checkout@v2.3.5
        with:
          repository: ${{ github.repository }}
          ref: ${{ env.branch }}
          fetch-depth: 1
      - name: Build Container Image
        run: docker build -t andromeda:latest . 
      - name: Tag Container Image
        run: docker tag andromeda:latest pai12345/andromeda:v0.0.1